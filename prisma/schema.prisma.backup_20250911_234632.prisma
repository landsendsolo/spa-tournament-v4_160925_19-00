generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "sqlite"
  url = "file:./dev.db"
}
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
  identifier String
  token String @unique
  expires DateTime
  @@unique([identifier, token])
}
enum Role {
  PLAYER
  ADMIN
  PLACEHOLDER
}
model User {
  id String @id @default(uuid())
  name String?
  email String? @unique
  mobile String? @unique
  role Role @default(PLAYER)
  image String?
  passwordHash String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  player Player?
  notifications Notification[]
}
model Player {
  id String @id @default(uuid())
  userId String @unique
  seed String?
  status String @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  matchesAsPlayerOne Match[] @relation("Player1")
  matchesAsPlayerTwo Match[] @relation("Player2")
  wonMatches Match[] @relation("Winner")
}
model Tournament {
  id String @id @default(uuid())
  name String
  startDate DateTime
  endDate DateTime?
  status String @default("UPCOMING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matches Match[]
}
model Match {
  id String @id @default(uuid())
  tournamentId String
  drawOrder Int
  round String
  player1Id String?
  player2Id String?
  scorePlayer1 Int @default(0)
  scorePlayer2 Int @default(0)
  winnerId String?
  status String @default("PENDING")
  scheduledTime DateTime?
  location String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player1 Player? @relation("Player1", fields: [player1Id], references: [id], onDelete: SetNull)
  player2 Player? @relation("Player2", fields: [player2Id], references: [id], onDelete: SetNull)
  winner Player? @relation("Winner", fields: [winnerId], references: [id], onDelete: SetNull)
  result Result?
  @@unique([tournamentId, drawOrder])
  @@index([tournamentId, player1Id, player2Id, winnerId])
}
model Result {
  id String @id @default(uuid())
  matchId String @unique
  frameDetails Json?
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}
model Notification {
  id String @id @default(uuid())
  userId String
  message String
  type String
  createdAt DateTime @default(now())
  read Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}
